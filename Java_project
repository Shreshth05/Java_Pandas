import java.util.*;
import java.io.*;

class LengthNotMatchingException extends Exception{										
	public void description() {
		System.out.println("Description of each series");
	}
}
class DataIndexSizeMisMatchException extends Exception{
	public void description() {
		System.out.println("Data size did not match. Please enter some differnet values.");
	}
}

class Series{

	HashMap<Integer,Integer> hm = new HashMap<>();							//Creating 2 new hashmaps for series creation.
	HashMap<Integer,Integer> hm2 = new HashMap<>();
	Scanner sc = new Scanner(System.in);
	int l1 = sc.nextInt();  			//length of key array
	int l2 = sc.nextInt();  			//length of value array
	int[] key= new int[l1];
	int[] value=new int[l2];
	int sum = 0;
	int min=Integer.MAX_VALUE;
	int max=Integer.MIN_VALUE;
	
	Series(){
		//this(Series(HashMap<Integer,String> hm))
		//this(Series(int[] key,int[] value))
		sum();
		mean();
		min();
		max();
	}
	
	Series(HashMap<Integer, Integer> hm){									//hard coding values into series1
		this.hm=hm;
		hm.put(1, 11);
		hm.put(2, 12);
		hm.put(3, 13);
		hm.put(4, 14);
		hm.put(5, 15);
		hm.put(6, 16);
		hm.put(7, 17);
		hm.put(8, 18);
		hm.put(9, 19);
		hm.put(10, 20);
	}
	Series(int[] key,int[] value){											//making series 2
		this.key=key;
		this.value=value;
		try {
			if(l1!=l2) {
				throw new DataIndexSizeMisMatchException();
			}
			else {
				for(int i=0;i<l1;i++) {
					key[i]=sc.nextInt();
					value[i]=sc.nextInt();
					hm2.put(key[i], value[i]);
				}
			}
		}
		catch(DataIndexSizeMisMatchException data){
			data.description();
		}
	}
	void sum() {
		for(int i=0;i<l1;i++) {
			sum+= value[i];
		}
		System.out.println("sum " + sum);
	}
	void count() {
		
	}
	void mean() {
		double mean=sum/l2;
		System.out.println("Mean is " + mean);
	}
	void first() {
		System.out.println("The first element of the first series is" + hm.keySet().toArray()[0]);
		System.out.println("The first element of the second series is" + hm2.keySet().toArray()[0]);
	}
	void last() {
		System.out.println("The last element of the first series is" + hm.keySet().toArray()[-1]);
		System.out.println("The last element of the second series is" + hm2.keySet().toArray()[-1]);
	}
	void min() {
		for(int i=0;i<l2;i++) {
			if(value[i]<min) {				//variable min here stores the maximum possible value for an integer
				min=value[i];				//since any value entered into the value[] will be lesser or equal to this value, it will find out the minimum value in the series.
			}
		}
		System.out.println("The minimum value is " + min);
	}
	void max() {
		for(int i=0;i<l2;i++) {				//variable max here stores the minimum possible value for an integer
			if(value[i]>max) {				//since any value entered into the value[] will be greater or equal to this value, it will find out the maximum value in the series.
				max=value[i];
			}
		}
		System.out.println("The maximum value is " + max);
	}

}


class DataFrame{

	Series obj = new Series();
	
	ArrayList<Series> al = new ArrayList<>();  	
	
	DataFrame(){
		//this(DataFrame(ArrayList<Series> al))
		//this(DataFrame(File csv))
		shape();
		head();
		describe();
	}

	DataFrame(ArrayList<Series> al)
	{
		this.al=al;
		al.add(obj);
		try {											 // Created a try catch block for exception handling.
			if(true) {
				throw new LengthNotMatchingException();
			}
		}
		catch(LengthNotMatchingException ex){
			ex.description();
		}
 	}
	
	
	String shape() {									// The shape method that returns the dimensions of the DataFrame.
		return "Shreshth";
	}
	
	void head() {										// The head function that prints the first 5 rows of the Dataframe.
		for(int i=0;i<5;i++) {
			System.out.println(al);
		}
	}
	
	void describe()										// The description of the Dataframe.
	{
		System.out.println("Description");
	}
	
	
	DataFrame(File csv) throws FileNotFoundException{
		 
		BufferedReader reader = null;  //BufferedReader for scanning files
		String line = "";
      
	      try {                         // Try reading the file and if there is a error print stacktrace
	     	 reader = new BufferedReader(new FileReader(csv)); //FileReader will help read the file 
	     	 
	     	 while((line = reader.readLine()) != null) {   // While loop will first read a string and then store it in "line"
	     		
	     		 String[] row = line.split(",") ;          // It will create a string array called row that splits the lines by commas(since we are using csv)
	     		
	     		for(String index : row) {
	     			System.out.printf("%-11s", index);   // %s used for specifying format(strings) and 11 spaces of room is allocated to for each 
	     		}
	     		
	     		System.out.println();
	     	 }
	      }
	      
	      catch(Exception e) {
	     	 e.printStackTrace();      // If the location of file went missing or any other error happens this will let us know what went wrong
	      }
      
     	 try {
				reader.close();   // closing our reader
			} 
     	 catch (IOException e) {
				e.printStackTrace();
     	 }
	}
}


class Project {

	public static void main(String[] args) {
		
		File csv = new File("C:\\Third sem\\WSAF");
		DataFrame obj3= new DataFrame();
	}
	
}

